print(today)
#4
days_to_break <- spring_break - today
print(days_to_break)
#5
# Function that takes in a "date" as a date type and a "year" as a number.
# Function will return a date type value that represents the argument "date" but
# in the year of argument "year"
change_year <- function(date, year) {
date_as_string <- as.character(date)
month_and_day <- substr(date_as_string, 5, 10)
new_date <- paste(year, month_and_day, sep = "")
return(as.Date(new_date))
}
#6
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
#6
spring_break_2025 <- change_year(spring_break, 2025)
#6
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
class(spring_break_2025)
#7
# Function that determines if the argument value "date" represented as a date type
# has already passed from today's date.
date_has_passed <- function(date, ignore_year=FALSE) {
if (ignore_year == TRUE) {
date <- as.Date(date, format ="%m-%d")
today_date <- format(Sys.Date(), format = "%m-%d")
days_passed_ignore_years <- today_date - date
return (days_passed_without_years > 0)
}
days_passed_with_years <- Sys.Date() - date
return(days_passed_with_years > 0)
}
#1
my_age <- 19
#2
my_name <- "Michelle"
#3
# Takes in a name and age of something to create an introduction.
# Function returns introduction.
make_introduction <- function(name, age) {
introduction <- paste("Hello, my name is", name, "and I'm", age, "years old.")
return(introduction)
}
#4
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
#5
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
#6
capital_intro <- str_to_title(my_intro) #Every word in introduction is capitalized
print(capital_intro)
#7
intro_e_count <- str_count(my_intro, 'e')
print(intro_e_count)
#1
books <- c("Harry Potter and the Order of the Phoenix", "The Little Prince", "The Hate U Give", "Nancy Drew", "Hardy Boys", "The Giving Tree")
print(books)
#2
top_three_books <- books[seq(1,3)]
print(top_three_books)
#3
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
#4
# Function that removes the book from the original books vector at a specific index that
# is passed as an argument. Function returns a vector with list of books except the one
# that was originally at that index.
remove_book <- function(books, index) {
updated_books <- books[-index]
return(updated_books)
}
#4
# Function that removes the book from the original books vector at a specific index that
# is passed as an argument. Function returns a vector with list of books except the one
# that was originally at that index.
remove_book <- function(books, index) {
updated_books <- books[-index]
return(updated_books)
}
#5:
books_without_five <- remove_book(books, 5)
print(books_without_five)
#6
#logical vector that determines which book titiles are longer than 15 characters.
is_long <- nchar(books) > 15
long_titles <- books[is_long] #New vector that includes books with title longer than 15 characters.
print(long_titles)
#1
numbers <- 1:201
#2
squared_numbers <- numbers * numbers
#3
squared_mean <- mean(squared_numbers)
print(squared_mean)
#4
squared_median <- median(squared_numbers)
print(squared_median)
#5
is_perfect_square <- sqrt(numbers) == round(sqrt(numbers)) #checks if square root of number is a whole number
perfect_squares <- numbers[is_perfect_square]
print(perfect_squares)
#1
spring_break <- as.Date("2020-03-21")
#2
class(spring_break)
#3
today <- Sys.Date()
print(today)
#4
days_to_break <- spring_break - today
print(days_to_break)
#5
# Function that takes in a "date" as a date type and a "year" as a number.
# Function will return a date type value that represents the argument "date" but
# in the passed argument "year"
change_year <- function(date, year) {
date_as_string <- as.character(date)
month_and_day <- substr(date_as_string, 5, 10)
new_date <- paste(year, month_and_day, sep = "")
return(as.Date(new_date))
}
date_as_string <- as.character(today)
month_and_day <- substr(date_as_string, 5, 10)
new_date <- paste(year, month_and_day, sep = "")
new_date <- paste(year, month_and_day, sep = "")
new_date <- paste(2019, month_and_day, sep = "")
print(new_date)
#6
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
class(spring_break_2025)
#7
# Function that determines if the argument "date" represented as a date type
# has already passed from today's date.
date_has_passed <- function(date) {
days_passed_with_years <- Sys.Date() - date
return(days_passed_with_years > 0)
}
#8
hw_due_date <- "2020-01-23"
has_passed <- date_has_passed(as.Date(hw_due_date))
print(has_passed)
#10
# Function that takes in a single birthdate (as Date-type value)
# Function will return a Date-type value that represents the
# date of that person's upcoming birthday.
get_next_birthday <- function(birthdate) {
date_of_next_year_birthday <- change_year(birthdate, 2020)
has_passed <- date_has_passed(date_of_next_year_birthday)
if (has_passed == TRUE) {
date_of_next_year_birthday <- change_year(birthdate, 2021)
}
return (next_year_birthdate)
}
#11
my_next_birthday <- get_next_birthday(birthdays$my_birthday)
print(my_next_birthday)
#9
birthdays <- list(
dad_birthday = as.Date("1962-09-01"),
mom_birthday = as.Date("1960-03-23"),
anna_birthday = as.Date("1995-08-05"),
thomas_birthday = as.Date("1997-02-09"),
catherine_birthday = as.Date("1998-04-15"),
my_birthday = as.Date("2000-08-11")
)
#11
my_next_birthday <- get_next_birthday(birthdays$my_birthday)
#10
# Function that takes in a single birthdate (as Date-type value)
# Function will return a Date-type value that represents the
# date of that person's upcoming birthday.
get_next_birthday <- function(birthdate) {
date_of_next_year_birthday <- change_year(birthdate, 2020)
has_passed <- date_has_passed(date_of_next_year_birthday)
if (has_passed == TRUE) {
date_of_next_year_birthday <- change_year(birthdate, 2021)
}
return (next_year_birthdate)
}
#9
birthdays <- list(
dad_birthday = as.Date("1962-09-01"),
mom_birthday = as.Date("1960-03-23"),
anna_birthday = as.Date("1995-08-05"),
thomas_birthday = as.Date("1997-02-09"),
catherine_birthday = as.Date("1998-04-15"),
my_birthday = as.Date("2000-08-11")
)
#10
# Function that takes in a single birthdate (as Date-type value)
# Function will return a Date-type value that represents the
# date of that person's upcoming birthday.
get_next_birthday <- function(birthdate) {
date_of_next_year_birthday <- change_year(birthdate, 2020)
has_passed <- date_has_passed(date_of_next_year_birthday)
if (has_passed == TRUE) {
date_of_next_year_birthday <- change_year(birthdate, 2021)
}
return (next_year_birthdate)
}
#11
my_next_birthday <- get_next_birthday(birthdays$my_birthday)
#10
# Function that takes in a single birthdate (as Date-type value)
# Function will return a Date-type value that represents the
# date of that person's upcoming birthday.
get_next_birthday <- function(birthdate) {
date_of_next_year_birthday <- change_year(birthdate, 2020)
has_passed <- date_has_passed(date_of_next_year_birthday)
if (has_passed == TRUE) {
date_of_next_year_birthday <- change_year(birthdate, 2021)
}
return (date_of_next_year_birthday)
}
#11
my_next_birthday <- get_next_birthday(birthdays$my_birthday)
print(my_next_birthday)
#12
next_birthdays <- lapply(birthdays, get_next_birthday)
print(next_birthdays)
#9
birthdays <- list(
dad_birthday = as.Date("1962-09-01"),
mom_birthday = as.Date("1960-03-23"),
anna_birthday = as.Date("1995-08-05"),
thomas_birthday = as.Date("1997-02-09"),
catherine_birthday = as.Date("1998-04-15"),
my_birthday = as.Date("2000-01-01")
)
#12
next_birthdays <- lapply(birthdays, get_next_birthday)
print(next_birthdays)
#10
# Function that takes in a single birthdate (as Date-type value)
# Function will return a Date-type value that represents the
# date of that person's upcoming birthday.
get_next_birthday <- function(birthdate) {
date_of_next_year_birthday <- change_year(birthdate, 2020)
has_passed <- date_has_passed(date_of_next_year_birthday)
if (has_passed == TRUE) {
date_of_next_year_birthday <- change_year(birthdate, 2021)
}
return (date_of_next_year_birthday)
}
#9
birthdays <- list(
dad_birthday = as.Date("1962-09-01"),
mom_birthday = as.Date("1960-03-23"),
anna_birthday = as.Date("1995-08-05"),
thomas_birthday = as.Date("1997-02-09"),
catherine_birthday = as.Date("1998-04-15"),
my_birthday = as.Date("2000-08-11")
)
#12
next_birthdays <- lapply(birthdays, get_next_birthday)
print(next_birthdays)
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
seahawks_points <- c(21, 28, 33,27)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
opponent_points_first_four_games <- c(20, 26, 27, 10)
# A vector of names
name <- c("Ada", "Bob", "Chris", "Diya", "Emma")
# A vector of heights
height <- c(64, 74, 69, 69, 71)
# A vector of weights
weight <- c(135, 156, 139, 144, 152)
# Combine the vectors into a data frame
# Note the names of the variables become the names of the columns!
people <- data.frame(name, height, weight, stringsAsFactors = FALSE)
print(people)
print(people$weight)
View(people)
nrow(people)
dim(people)
colnames(people)
colnames(people) <- c("first_name", "height_inches", "weight_pounds")
print(people)
people <- data.frame(name, height, weight, stringsAsFactors = FALSE)
people[2,]
people[2,1]
people[[2,1]]
people[2,2]
people[2,]
people[1:2,]
people$name
people$name == "Ada"
people[is_ada,]
people[ipeople$name == "Ada", "height"]
people[people$name == "Ada", "height"]
people[people$name == "Ada",]
people[people$height == 69, "weight"]
# Combine your two vectors into a dataframe called `games`
games <- data.frame(seahawks_points_first_four_games, opponent_points_first_four_games)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(seahawks_points_first_four_games, opponent_points_first_four_games)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
opponent_points_first_four_games <- c(20, 26, 27, 10)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(seahawks_points_first_four_games, opponent_points_first_four_games)
seahawks_points_first_four_games <- c(21, 28, 33,27)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
opponent_points_first_four_games <- c(20, 26, 27, 10)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(seahawks_points_first_four_games, opponent_points_first_four_games)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(seahawks_points_first_four_games, opponent_points_first_four_games, stringsAsFactors = FALSE)
print(games)
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
seahawks_points <- c(21, 28, 33,27)
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
seahawks_points <- c(21, 28, 33,27)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
opponent_points <- c(20, 26, 27, 10)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
print(employees)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
print(salaries_2017)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, salary_adjustments)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, salary_adjustments, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries_2018 <- runif(100, 40000, 50000) + salary_adjustments
salaries$salaries_2018 <- salaries_2018
View(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
got_raise <- slaries$salaries_2017 < salaries$salaries_2018
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries_2018 <- runif(100, 40000, 50000) + salary_adjustments
salaries$salaries_2018 <- salaries_2018
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
got_raise <- salaries$salaries_2017 < salaries$salaries_2018
print(got_raise)
salaries$got_raise <- got_raise
View(salaries)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries_2018 <- salaries$salaries_2017 + salary_adjustments
salaries$salaries_2018 <- salaries_2018
View(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
got_raise <- salaries$salaries_2017 < salaries$salaries_2018
salaries$got_raise <- got_raise
View(salaries)
# What was the 2018 salary of Employee 57
salaries[salaries$employees == 57, "salaries_2018"]
# What was the 2018 salary of Employee 57
salaries[salaries$employees == 57, "salaries_2018"]
people[people$height == 69, "weight"]
people <- data.frame(name, height, weight, stringsAsFactors = FALSE)
# A vector of names
name <- c("Ada", "Bob", "Chris", "Diya", "Emma")
# A vector of heights
height <- c(64, 74, 69, 69, 71)
# A vector of weights
weight <- c(135, 156, 139, 144, 152)
# Combine the vectors into a data frame
# Note the names of the variables become the names of the columns!
people <- data.frame(name, height, weight, stringsAsFactors = FALSE)
people[people$height == 69, "weight"]
View(people)
# What was the 2018 salary of Employee 57
salaries[salaries$employees == 57, "salaries_2018"]
# What was the 2018 salary of Employee 57
print(salaries[salaries$employees == 57, "salaries_2018"])
# What was the 2018 salary of Employee 57
employee_57 <- paste("Employee", 57)
salaries[salaries$employees == employee_57, "salaries_2018"]
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
got_raise <- salaries$salary_adjustments
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
got_raise <- salaries$salary_adjustments > 0
salaries$got_raise <- got_raise
View(salaries)
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
print(employees)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, salary_adjustments, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries_2018 <- salaries$salaries_2017 + salary_adjustments
salaries$salaries_2018 <- salaries_2018
got_raise <- salaries$salary_adjustments > 0
salaries$got_raise <- got_raise
View(salaries)
# What was the 2018 salary of Employee 57
employee_57 <- paste("Employee", 57)
salaries[salaries$employees == employee_57, "salaries_2018"]
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "Employee_57", "salaries_2018"]
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "Employee 57", "salaries_2018"]
# How many employees got a raise?
salaries[salaries$got_raise == TRUE]
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE])
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE,])
# What was the dollar value of the highest raise?
max(salaries[salaries$got_raise, ])
# What was the dollar value of the highest raise?
max(salaries[salaries$salary_adjustments, ])
max(salaries$salary_adjustments)
# What was the dollar value of the highest raise?
salaries[salaries$salary_adjustments == max(salaries$salary_adjustments), ]
# What was the dollar value of the highest raise?
salaries[salaries$salary_adjustments == max(salaries$salary_adjustments), "salary_adjustments"]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$salary_adjustments == max(salaries$salary_adjustments), "employees"]
# What was the largest decrease in salaries between the two years?
largest_decrease <- min(salaries$salaries_2017 - salaries$salaries_2018)
print(largest_decrease)
# What was the largest decrease in salaries between the two years?
largest_decrease <- min(salaries$salary_adjustments)
print(largest_decrease)
print(largest_decrease)
# What was the "name" of the employee who received the highest raise?
name_highest_raise <- salaries[salaries$salary_adjustments == max(salaries$salary_adjustments), "employees"]
print(name_highest_raise)
# What was the dollar value of the highest raise?
highest_raise <- salaries[salaries$salary_adjustments == max(salaries$salary_adjustments), "salary_adjustments"]
print(highest_raise)
# How many employees got a raise?
num_received_raise <- nrow(salaries[salaries$got_raise == TRUE, ])
print(num_received_raise)
# What was the 2018 salary of Employee 57
salary_employee_57 <- salaries[salaries$employees == "Employee 57", "salaries_2018"]
print(salary_employee_57)
# What was the name of the employee who recieved largest decrease in salary?
employee_name_has_largest_decrease <- salaries[salaries$salary_adjustments == largest_decrease, ]
print(employee_name_has_largest_decrease)
# What was the name of the employee who recieved largest decrease in salary?
employee_name_has_largest_decrease <- salaries[salaries$salary_adjustments == largest_decrease, "employees"]
print(employee_name_has_largest_decrease)
# What was the average salary change?
avg_salary_change <- mean(salaries$salary_adjustments)
print(avg_salary_change)
# For people who did not get a raise, how much money did they lose on average?
no_raise <- salaries[salaries$got_raise == FALSE, ]
print(no_raise)
mean(salaries[no_raise])
mean(salaries$salary_adjustments[no_raise])
# For people who did not get a raise, how much money did they lose on average?
no_raise <- salaries[salaries$got_raise == FALSE, salaries$salary_adjustments]
print(no_raise)
# For people who did not get a raise, how much money did they lose on average?
no_raise <- salaries[salaries$got_raise == FALSE, salaries$salary_adjustments]
# For people who did not get a raise, how much money did they lose on average?
no_raise <- salaries[salaries$got_raise == FALSE, "salary_adjustments"]
print(no_raise)
mean(no_raise)
# Write a .csv file of your salary data to your working directory
my_date <- read.csv('INFO201/my_file.csv', stringsAsFactors=FALSE)
# Write a .csv file of your salary data to your working directorys
write.csv(salaries, 'salaries.csv')
# Write a .csv file of your salary data to your working directorys
write.csv(salaries, 'C:\\Users\\michellepham\\Desktop\\INFO201\\salaries.csv',row.names = FALSE)
getwd()
# Write a .csv file of your salary data to your working directorys
write.csv(salaries, '\\Desktop\\INFO201\\salaries.csv',row.names = FALSE)
# Write a .csv file of your salary data to your working directorys
write.csv(salaries, 'Desktop\\INFO201\\salaries.csv',row.names = FALSE)
setwd("~/Desktop/INFO201/book-exercises/chapter-10-exercises/exercise-2")
# Write a .csv file of your salary data to your working directorys
write.csv(salaries, row.names = FALSE)
# Write a .csv file of your salary data to your working directorys
write.csv(salaries, 'salaries.csv', row.names = FALSE)
# Write a .csv file of your salary data to your working directorys
write.csv(salaries, 'salariess.csv')
